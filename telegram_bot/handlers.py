from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import Message
from database.utils import SQL
from core.utils import calculate_offer
from keyboards.inline import set_admin_inline_keyboard, create_link

router = Router()
admin_ids = [588120104, 367150414]
admin_keyboard = set_admin_inline_keyboard()
sql = SQL()


@router.message(Command('start'))
async def start(message: Message):
    try:
        await message.answer(text='–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ',
                             reply_markup=admin_keyboard)
    except Exception as e:
        await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}.')


# @router.callback_query(lambda callback_query: callback_query.data == 'get_currency')
# async def get_currency(callback_query: types.CallbackQuery):
#     if callback_query.from_user.id in admin_ids:
#         try:
#             exchange_rate_message = f'üìà –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç –Ω–∞ <b>{currencies["updated"]}</b>:\n\n' \
#                                     f'üá™üá∫ –ï–≤—Ä–æ: <b>{currencies["currency"]["EUR"]}</b> ‚ÇΩ\n' \
#                                     f'üá∫üá∏ –î–æ–ª–ª–∞—Ä –°–®–ê: <b>{currencies["currency"]["USD"]}</b> ‚ÇΩ\n' \
#                                     f'üáØüáµ –Ø–ø–æ–Ω—Å–∫–∞—è –ò–µ–Ω–∞: <b>{currencies["currency"]["JPY"]}</b> ‚ÇΩ\n' \
#                                     f'üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–π –Æ–∞–Ω—å: <b>{currencies["currency"]["CNY"]}</b> ‚ÇΩ\n'
#
#             await callback_query.answer()
#             await callback_query.message.edit_text(exchange_rate_message, parse_mode='html')
#
#         except Exception as e:
#             await callback_query.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç: {e}.')
#     else:
#         await callback_query.message.edit_text('–í—ã –Ω–µ –∞–¥–º–∏–Ω.')


@router.callback_query(lambda callback_query: callback_query.data == 'get_japan_consumptions')
async def get_japan_consumptions(callback_query: types.CallbackQuery):
    if callback_query.from_user.id in admin_ids:
        try:
            await callback_query.message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ –≤ –π–µ–Ω–∞—Ö')

        except Exception as e:
            await callback_query.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}.')
    else:
        await callback_query.message.edit_text('–í—ã –Ω–µ –∞–¥–º–∏–Ω.')


@router.message(lambda message: message.text.isdigit() and int(message.text) > 0)
async def get_japan_consumptions(message: types.Message):
    if message.from_user.id in admin_ids:
        try:
            car_price = int(message.text)
            japan_consumptions = calculate_offer(car_price)
            await message.answer(text=f'–†–∞—Å—Ö–æ–¥—ã –ø–æ –Ø–ø–æ–Ω–∏–∏ —Å–æ—Å—Ç–∞–≤—è—Ç: <b>{japan_consumptions}</b> —Ä—É–±–ª–µ–π.', parse_mode='html')
        except Exception as e:
            await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}.')
    else:
        await message.edit_text('–í—ã –Ω–µ –∞–¥–º–∏–Ω.')


@router.callback_query(lambda callback_query: callback_query.data == 'orders')
async def get_orders(callback_query: types.CallbackQuery):
    if callback_query.from_user.id in admin_ids:
        try:
            orders = sql.get_orders()
            for order in orders:
                keyboard = create_link(1, link=order[10], text='–û—Ç–∫—Ä—ã—Ç—å –∞—É–∫—Ü–∏–æ–Ω', id=order[0])
                await callback_query.message.answer_photo(photo=f"{order[9]}",
                                                          caption=f"üîé <b>–ó–∞—è–≤–∫–∞ ‚Ññ {order[0]}</b>\n"
                                                                  f"üîπ <b>–ò–º—è:</b> {order[2]}\n"
                                                                  f"üîπ <b>–§–∞–º–∏–ª–∏—è:</b> {order[3]}\n"
                                                                  f"üîπ <b>–¢–µ–ª–µ–≥—Ä–∞–º ID:</b> <a href='tg://user?id={order[1]}'>{order[1]}</a>\n"
                                                                  f"‚òéÔ∏è <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <a href='tel:{order[4]}'>{order[4]}</a>\n"
                                                                  f"üöó <b>–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ:</b> {order[5]}\n"
                                                                  f"‚≠êÔ∏è <b>–û—Ü–µ–Ω–∫–∞:</b> {order[6]}\n"
                                                                  f"üíµ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {order[7]} ‚ÇΩ\n"
                                                                  f"üìç <b>–°—Ç–∞—Ç—É—Å:</b> {order[8]}\n"
                                                                  f"üí∞ <b>–û–ø–ª–∞—á–µ–Ω:</b> {'‚úÖ' if order[11] else '‚ùå'}\n",
                                                          parse_mode='html', reply_markup=keyboard)
        except Exception as e:
            await callback_query.message.answer(text=f'–ö–∞–∫–∞—è —Ç–æ —Ö—É–π–Ω—è: {e}')
    else:
        await callback_query.message.answer(text='–í—ã –Ω–µ –∞–¥–º–∏–Ω.')
