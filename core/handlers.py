import os
import requests
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import Message
from database.utils import SQL
from core.utils import calculate_offer, update_currency_rate
from datetime import datetime
from keyboards.inline import set_admin_inline_keyboard

router = Router()
sql = SQL()
admin_ids = os.getenv('ADMIN_IDS')
admin_keyboard = set_admin_inline_keyboard()


@router.message(Command('start'))
async def start(message: Message):
    try:
        await message.answer(text='–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ',
                             reply_markup=admin_keyboard)
    except Exception as e:
        await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}.')


@router.callback_query(lambda callback_query: callback_query.data == 'get_currency')
async def get_currency(callback_query: types.CallbackQuery):
    if str(callback_query.from_user.id) in admin_ids:
        try:
            currency_rate = update_currency_rate()
            date_time = currency_rate['updated']
            eur_rate = currency_rate['EUR']
            usd_rate = currency_rate['USD']
            jpy_rate = currency_rate['JPY']
            cny_rate = currency_rate['CNY']
            exchange_rate_message = f'–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç –Ω–∞ <b>{date_time}</b>:\n\n' \
                                    f'üá™üá∫ –ï–≤—Ä–æ: <b>{round(eur_rate, 2)}</b> ‚ÇΩ\n' \
                                    f'üá∫üá∏ –î–æ–ª–ª–∞—Ä –°–®–ê: <b>{round(usd_rate, 2)}</b> ‚ÇΩ\n' \
                                    f'üáØüáµ –Ø–ø–æ–Ω—Å–∫–∞—è –ò–µ–Ω–∞: <b>{round(jpy_rate, 2)}</b> ‚ÇΩ\n' \
                                    f'üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–π –Æ–∞–Ω—å: <b>{round(cny_rate, 2)}</b> ‚ÇΩ\n'

            await callback_query.answer()
            await callback_query.message.edit_text(exchange_rate_message, parse_mode='html')

        except Exception as e:
            await callback_query.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç: {e}.')
    else:
        await callback_query.message.edit_text('–í—ã –Ω–µ –∞–¥–º–∏–Ω.')


@router.callback_query(lambda callback_query: callback_query.data == 'get_japan_consumptions')
async def get_japan_consumptions(callback_query: types.CallbackQuery):
    if str(callback_query.from_user.id) in admin_ids:
        try:
            await callback_query.message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ –≤ –π–µ–Ω–∞—Ö')

        except Exception as e:
            await callback_query.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}.')
    else:
        await callback_query.message.edit_text('–í—ã –Ω–µ –∞–¥–º–∏–Ω.')


@router.message(lambda message: message.text.isdigit() and int(message.text) > 0)
async def get_japan_consumptions(message: types.Message):
    if str(message.from_user.id) in admin_ids:
        try:
            car_price = int(message.text)
            japan_consumptions = calculate_offer(car_price)
            await message.answer(text=f'–†–∞—Å—Ö–æ–¥—ã –ø–æ –Ø–ø–æ–Ω–∏–∏ —Å–æ—Å—Ç–∞–≤—è—Ç: <b>{japan_consumptions}</b> —Ä—É–±–ª–µ–π.', parse_mode='html')
        except Exception as e:
            await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}.')
    else:
        await message.edit_text('–í—ã –Ω–µ –∞–¥–º–∏–Ω.')
